--[[
Author: TheOriginalBIT
Version: 1.4.4
Created: 5 Feb 2013
Last Update: 16 Feb 2013

License:

COPYRIGHT NOTICE
Copyright Â© 2013 Joshua Asbury a.k.a TheOriginalBIT [theoriginalbit@gmail.com]

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
associated documentation files (the "Software"), to deal in the Software without restriction,
including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
copies of the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

-The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
-Visible credit is given to the original author.
-The software is distributed in a non-profit way.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
]]--

local configHeader = [[
+-------------------------------------------+
+--          CONFIGURATION FILE           --+
+-- Generated by TheOriginalBIT's CConfig --+
+-------------------------------------------+

]]

local startsWith = function(str, prefix) prefix = tostring(prefix) return str:sub( 1, prefix:len()) == prefix end
local contains = function(str, seq) str = tostring(str) local sStart, sEnd, sStr = str:find(seq, 1) return sStart ~= nil end
local split = function(str, pat) local t = {} local fpat = "(.-)"..pat local last_end = 1 local s, e, cap = str:find(fpat, 1) while s do if s ~= 1 or cap ~= "" then table.insert(t,cap) end last_end = e+1 s, e, cap = str:find(fpat, last_end) end if last_end <= #str then cap = str:sub(last_end) table.insert(t, cap) end return t end

local openedConfigs = {}
local Configuration = {}
local debugCount = 0

Configuration.__index = Configuration

function new(p)
  if type(p) ~= "string" then error("Invalid file path supplied",2) end
  if openedConfigs[p] then error("A configuration file object already exists for this file",2) end
  openedConfigs[p] = true
  return setmetatable({ path = p, properties = {} }, Configuration)
end

function init(p)
  if type(p) ~= "string" then error("Invalid file path supplied",2) end
  if openedConfigs[p] then error("A configuration file object already exists for this file",2) end
  return new(p)
end

local function get(self, key, defaultValue)
  if type(self.properties[key]) == "table" then
    self.properties[key].default = defaultValue
    return self.properties[key].value
  else
    self.properties[key] = {}
    self.properties[key].value = defaultValue
    self.properties[key].default = defaultValue
    self.properties[key].comment = ""
    self.properties[key].restrict = ""
    return defaultValue
  end
end

local function validBoolean(b)
  return (b == "true" or b == "false" or b == "1" or b == "0" or b == 1 or b == 0 or b == true or b == false or b == "yes" or b == "no")
end

function Configuration:getBoolean(key, defaultBoolean)
  if type(key) ~= "string" then error("Invalid parameter, expected string got "..type(key),2) end
  if not validBoolean(defaultBoolean) then error("Boolean value expected, got "..type(defaultBoolean).." of type "..type(defaultBoolean),2) end
  local v = get(self, key, defaultBoolean)
  if not validBoolean(v) then error("No boolean value found under the key \'"..tostring(key).."\', found "..tostring(v).." of type "..type(v),2) end
  return v == "true" or v == true or v == "1" or v == 1 or v == "yes"
end

function Configuration:getNumber(key, defaultNumber)
  if type(key) ~= "string" then error("Invalid parameter, expected string got "..type(key),2) end
  return tonumber(get(self, key, defaultNumber)) or error("Number expected, got "..type(defaultNumber),2)
end

function Configuration:getString(key, defaultString)
  if type(key) ~= "string" then error("Invalid parameter, expected string got "..type(key),2) end
  return tostring(get(self, key, defaultString)) or error("Invalid parameter, expected string got "..type(key),2)
end

local colorStrings = {
  ["colors.white"] = colors.white, ["colours.white"] = colors.white, ["white"] = colors.white,
  ["colors.orange"] = colors.orange, ["colours.orange"] = colors.orange, ["orange"] = colors.orange,
  ["colors.magenta"] = colors.magenta, ["colours.magenta"] = colors.magenta, ["magenta"] = colors.magenta,
  ["colors.lightblue"] = colors.lightBlue, ["colours.lightblue"] = colors.lightBlue, ["lightblue"] = colors.lightBlue, ["light blue"] = colors.lightBlue,
  ["colors.yellow"] = colors.yellow, ["colours.yellow"] = colors.yellow, ["yellow"] = colors.yellow,
  ["colors.lime"] = colors.lime, ["colours.lime"] = colors.lime, ["lime"] = colors.lime,
  ["colors.pink"] = colors.pink, ["colours.pink"] = colors.pink, ["pink"] = colors.pink,
  ["colors.gray"] = colors.gray, ["colours.gray"] = colors.gray, ["gray"] = colors.gray,
  ["colors.grey"] = colors.gray, ["colours.grey"] = colors.gray, ["grey"] = colors.gray,
  ["colors.lightgray"] = colors.lightGray, ["colours.lightgray"] = colors.lightGray, ["lightgray"] = colors.lightGray, ["light gray"] = colors.lightGray,
  ["colors.lightgrey"] = colors.lightGray, ["colours.lightgrey"] = colors.lightGray, ["lightgrey"] = colors.lightGray, ["light grey"] = colors.lightGray,
  ["colors.cyan"] = colors.cyan, ["colours.cyan"] = colors.cyan, ["cyan"] = colors.cyan,
  ["colors.purple"] = colors.purple, ["colours.purple"] = colors.purple, ["purple"] = colors.purple,
  ["colors.blue"] = colors.blue, ["colours.blue"] = colors.blue, ["blue"] = colors.blue,
  ["colors.brown"] = colors.brown, ["colours.brown"] = colors.brown, ["brown"] = colors.brown,
  ["colors.green"] = colors.green, ["colours.green"] = colors.green, ["green"] = colors.green,
  ["colors.red"] = colors.red, ["colours.red"] = colors.red, ["red"] = colors.red,
  ["colors.black"] = colors.black, ["colours.black"] = colors.black, ["black"] = colors.black,
}

local function validateColor(col)
  if tonumber(col) then
    local col = tonumber(col)
    if not (col >= 2^0 and col <= (2^16)-1) then return false end
    return true, col
  else
    if colorStrings[col:lower()] then
      return true, colorStrings[col:lower()]
    else
      return false
    end
  end
end

function Configuration:getColor(key, defaultColor)
  if type(key) ~= "string" then error("Invalid parameter, expected string got "..type(key),2) end
  if not validateColor(defaultColor) then error("Invalid parameter, color expected",2) end
  local col = get(self, key, defaultColor)
  self.properties[key].restrict = "A number between 1 and 65535 or the string colors.<color>"
  local ok, col = validateColor(col)
  if not ok then
    error("Config file does not contain color for value "..tostring(key),2)
  end
  return col
end

function Configuration:getColour(key, defaultColor)
  if type(key) ~= "string" then error("Invalid parameter, expected string got "..type(key),2) end
  if not validateColor(defaultColor) then error("Invalid parameter, color expected",2) end
  return self:getColor(key, defaultColor)
end

function Configuration:getTable(key, defaultTable)
  if type(key) ~= "string" then error("Invalid parameter, expected string got "..type(key),2) end
  if type(defaultTable) ~= "table" then error("Invalid parameter, expected table got "..type(defaultTable),2) end
  local v = self:getString(key, textutils.serialize(defaultTable))
  v = textutils.unserialize(v)
  return v or error("",2)
end

function Configuration:containsKey(key)
  return (self.properties[key] ~= nil)
end

function Configuration:load()
  if not fs.exists(self.path) then return false end
  local handle = fs.open(self.path,"r")
  local contents = handle.readAll()
  handle.close()

  if not contents or contents == "" or contents == "\n" then return end
  local count = 1
  contents = split(contents,"\n")
  for i = 1, #contents do
    local v = contents[i]
    if v and v ~= "" and not startsWith(v,"+--") and contains(v,"=") then
      local prop = split(v, "%=")
      self.properties[prop[1]] = {}
      self.properties[prop[1]]["value"] = prop[2]
      self.properties[prop[1]]["comment"] = ""
      self.properties[prop[1]]["default"] = prop[2]
    elseif v and v ~= "" and not startsWith(v,"+--") and not contains(v,"=") then
      print("Error: \""..self.path.."\" "..i..": Unexpected/Invalid line found in configuration file")
      error()
    end
  end
  return true
end

function Configuration:reset(key)
  if type(self) ~= "table" or type(self.properties) ~= "table" then error("Error resetting config, have you forgotten to load the config?",2) end
  if key and not self.properties[key] then error("No property for key "..tostring(key)..", have you forgotten to load the config?",2) end

  if key then
    self.properties[key].value = self.properties[key].default
  else
    for k,_ in pairs(self.properties) do
      self.properties[k].value = self.properties[k].default
    end
  end
end

function Configuration:save()
  local handle = fs.open(self.path,"w")
  handle.write(configHeader)
  for k,v in pairs(self.properties) do
    handle.write("+-- ")
    if v.comment and v.comment ~= "" then
      handle.write(tostring(v.comment).."; ")
    end
    if v.restrict and v.restrict ~= "" then
      handle.write("restrictions: "..tostring(v.restrict).."; ")
    end
    handle.write("default: "..tostring(v.default).."\n")
    handle.write(k.."="..tostring(v.value).."\n\n")
  end
  handle.close()
end

function Configuration:addCommentForKey(key,com)
  if self.properties[key] then
    self.properties[key].comment = com
  else
    error("No property with key \'"..tostring(key).."\' to add comment for",2)
  end
end

function Configuration:addRestrictionForKey(key,res)
  if self.properties[key] then
    self.properties[key].restrict = res
  else
    error("No property with key \'"..tostring(key).."\' to add comment for",2)
  end
end

function Configuration:debug(toFile)
  toFile = (toFile == true)

  if toFile then local handle = fs.open("debug"..debugCount,"w") end

  for k,v in pairs(self.properties) do
    if toFile then
      handle.write(k..":"..v.value.."\n")
    else
      print(k..":"..v.value)
    end
  end
  if toFile then
    handle.close()
    debugCount = debugCount + 1
  end
end