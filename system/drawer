-- ========================================
-- The KreOS 3.0 Skylark Drawer
-- Written by kornichen
-- Lastly modified on 6th April 2015
-- Licensed under General Public License V3
-- ========================================

os.loadAPI("/system/apis/skylark")

local pages, buttons, inputboxes, labels, checkboxes, scrollbars, images, render, action = skylark.init()
local w, h = term.getSize()

local function imageGetSize(image)
	local x = 0
	local y = #image
	for i = 1, y do
		if #image[i] > x then
			x = #image[i]
		end
	end
	return x, y
end

local function getBgColorFromFile()
	local file = fs.open("/system/config/config", "r")
	local data = file.readAll()
	file.close()
	local config = textutils.unserialize(data)
	return config[3][6][1]
end

local function getClockConfigFromFile()
	local file = fs.open("/system/config/config", "r")
	local data = file.readAll()
	file.close()
	local config = textutils.unserialize(data)
	return { config[4][6][1], config[4][6][2], config[4][6][3] }
end

local function getDateFromInternet(zone)
	local dateTimeString = http.get("http://www.timeapi.org/" .. zone .. "/now").readAll()
	local date = string.sub(dateTimeString, 1, 10)
	return date
end

local function getTimeFromInternet(zone, seperated)
	seperated = seperated or false
	local dateTimeString = http.get("http://www.timeapi.org/" .. zone .. "/now").readAll()
	if seperated then
		local time = string.sub(dateTimeString, 12, 19)
		local hours = string.sub(time, 1, 2)
		local minutes = string.sub(time, 4, 5)
		local seconds = string.sub(time, 7, 8)
		return { hours, minutes, seconds }
	else
		local time = string.sub(dateTimeString, 12, 16)
		return time
	end
end

local function setStatusText(statusText)
	term.setTextColor(colors.black)
	term.setBackgroundColor(colors.white)
	term.setCursorPos((w / 2) - (string.len(statusText) / 2), h - 2)
	term.clearLine()
	term.write(statusText)
end

local file = fs.open("/system/config/apps", "r")
local data = file.readAll()
file.close()
local apps = textutils.unserialize(data)

pages:create("drawer", "Home", true, getBgColorFromFile(), true)

buttons:create("btnDrawerSettings", "drawer", true, 2, 2, "Settings", colors.cyan, colors.gray, function()
	pages:disable("drawer")
	shell.run("/system/settings", "drawer")
	pages:enable("drawer")
	pages:changeBgColor("drawer", getBgColorFromFile())
end)

local time = ""

if getClockConfigFromFile()[2] then
	setStatusText("Fetching time")
	time = getTimeFromInternet(getClockConfigFromFile()[3])
else
	time = textutils.formatTime(os.time(), getClockConfigFromFile()[1])
end

labels:create("lbTime", "drawer", true, w - string.len(time), 2, time, colors.cyan, colors.gray)

local page = 1
local appsIcons = {}
local temp = 1
local temp2 = 1
appsIcons[1] = {}
for i = 2, #apps do
	appsIcons[temp2][temp] = { apps[i][3], apps[i][4], apps[i][5] }
	temp = temp + 1
	if temp > 4 then
		temp = 1
		temp2 = temp2 + 1
		appsIcons[temp2] = {}
	end
end
local appsPages = #appsIcons

if appsPages > 1 then
	buttons:create("btnDrawerLast", "drawer", true, 2, h - 1, "<--", colors.black, colors.white, function()
		if page > 1 then
			page = page - 1
		end
	end)
	buttons:create("btnDrawerNext", "drawer", true, w - 3, h - 1, "-->", colors.black, colors.white, function()
		if page < appsPages then
			page = page + 1
		end
	end)
end

local btnX = 1

for j = 1, appsPages do
	local x = 1
	if #appsIcons[page] == 1 then
		x = (w / 2) - 3
	elseif #appsIcons[page] == 2 then
		x = (w / 2) - 6
	elseif #appsIcons[page] == 3 then
		x = (w / 2) - 12
	elseif #appsIcons[page] >= 4 then
		x = (w / 2) - 16
	end

	for i = 1, #appsIcons[j] do

		if j == page then
			local enabled = true
		else
			local enabled = false
		end
		local icon = paintutils.loadImage(appsIcons[j][i][2])
		local text = appsIcons[j][i][1]

		images:create("imgApp" .. j .. i, "drawer", enabled, x, (h / 2) - (imageGetSize(icon) / 2) + 2, icon, function()
			if appsIcons[j][i][3] ~= false then
				pages:disable("drawer")
				shell.run(appsIcons[j][i][3])
				term.setCursorBlink(false)
				pages:enable("drawer")
			end
		end)

		if string.len(text) == 1 then
			btnX = x + 3
		elseif string.len(text) == 2 or string.len(text) == 3 then
			btnX = x + 2
		elseif string.len(text) == 4 or string.len(text) == 5 then
			btnX = x + 1
		elseif string.len(text) == 6 or string.len(text) == 7 then
			btnX = x
		elseif string.len(text) == 8 or string.len(text) == 9 then
			btnX = x - 1
		elseif string.len(text) == 10 or string.len(text) == 11 then
			btnX = x - 2
		else
			btnX = x - 3
		end
		buttons:create("btnApp" .. j .. i, "drawer", enabled, btnX, (h / 2) + 6, text, colors.black, colors.white, function()
			if appsIcons[j][i][3] ~= false then
				pages:disable("drawer")
				shell.run(appsIcons[j][i][3])
				term.setCursorBlink(false)
				pages:enable("drawer")
			end
		end)

		x = x + 9
	end
end

local function activateCurrentPage()
	for j = 1, appsPages do
		for i = 1, #appsIcons[j] do
			if page == j then
				images:enable("imgApp" .. j .. i)
				buttons:enable("btnApp" .. j .. i)
			else
				images:disable("imgApp" .. j .. i)
				buttons:disable("btnApp" .. j .. i)
			end
			if page == 1 then
				buttons:disable("btnDrawerLast")
				buttons:enable("btnDrawerNext")
			elseif page == appsPages then
				buttons:disable("btnDrawerNext")
				buttons:enable("btnDrawerLast")
			else
				buttons:enable("btnDrawerNext")
				buttons:enable("btnDrawerLast")
			end
		end
	end
end

local clockTimer = os.startTimer(getClockConfigFromFile()[2] and 10 or 1)
local clockType = getClockConfigFromFile()[1]
local rtc = getClockConfigFromFile()[2]

local function mainLoop()
	while true do
		activateCurrentPage()
		render:all(pages, buttons, inputboxes, labels, checkboxes, images, event)
		if not rtc then
			time = textutils.formatTime(os.time(), getClockConfigFromFile()[1])
			labels:changeText("lbTime", time)
			labels:changePosition("lbTime", w - string.len(time), 2)
		end
		action:pullEvent(pages, buttons, inputboxes, checkboxes, images)
		clockTimer = os.startTimer(1)
	end
end

local function timeLoop()
	local realTime = getTimeFromInternet(getClockConfigFromFile()[3], true)
	local timeHours = tonumber(realTime[1])
	local timeMinutes = tonumber(realTime[2])
	local timeSeconds = tonumber(realTime[3])
	while true do
		time = timeHours .. ":" .. timeMinutes
		labels:changeText("lbTime", time)
		labels:changePosition("lbTime", w - string.len(time), 2)

		timeSeconds = timeSeconds + 1
		if timeSeconds >= 60 then
			timeSeconds = 0
			timeMinutes = timeMinutes + 1
			if timeMinutes >= 60 then
				timeMinutes = 0
				timeHours = timeHours + 1
			end
			if timeHours >= 24 then
				timeHours = 0
			end
		end
		sleep(1000)
	end
end

if rtc then
	parallel.waitForAny(mainLoop, timeLoop)
else
	mainLoop()
end